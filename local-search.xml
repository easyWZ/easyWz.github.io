<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>jsArray</title>
    <link href="/2023/11/20/jsArray/"/>
    <url>/2023/11/20/jsArray/</url>
    
    <content type="html"><![CDATA[<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><table><thead><tr><th>函数</th><th>锚点</th></tr></thead><tbody><tr><td><code>var arr = new Array()</code></td><td><a href="#create">LINK</a></td></tr><tr><td><code>var arr = new Array(10)</code></td><td><a href="#create">LINK</a></td></tr><tr><td><code>var arr = Array(7)</code></td><td><a href="#create">LINK</a></td></tr><tr><td><code>var arr = Array.of(7)</code></td><td><a href="#create">LINK</a></td></tr></tbody></table><h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><table><thead><tr><th>函数</th><th>简述</th><th>锚点</th></tr></thead><tbody><tr><td><code>concat()</code></td><td>合并</td><td><a href="#concat">LINK</a></td></tr><tr><td><code>unshift()</code></td><td>向开头添加</td><td><a href="#unshift">LINK</a></td></tr><tr><td><code>push()</code></td><td>向末尾添加</td><td><a href="#push">LINK</a></td></tr><tr><td><code>splice()</code></td><td>可选参数用于添加</td><td><a href="#splice">LINK</a></td></tr></tbody></table><h2 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h2><table><thead><tr><th>函数</th><th>简述</th><th>锚点</th></tr></thead><tbody><tr><td><code>slice()</code></td><td>切割</td><td><a href="#slice">LINK</a></td></tr></tbody></table><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><table><thead><tr><th>函数</th><th>简述</th><th>锚点</th></tr></thead><tbody><tr><td><code>splice()</code></td><td></td><td><a href="#splice">LINK</a></td></tr><tr><td><code>pop()</code></td><td></td><td><a href="#pop">LINK</a></td></tr><tr><td><code>shift()</code></td><td></td><td><a href="#shift">LINK</a></td></tr></tbody></table><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><table><thead><tr><th>函数</th><th>简述</th><th>锚点</th></tr></thead><tbody><tr><td><code>constructor</code></td><td></td><td><a href="#constructor">LINK</a></td></tr><tr><td><code>prototype</code></td><td></td><td><a href="#prototype">LINK</a></td></tr><tr><td><code>length</code></td><td></td><td><a href="#length">LINK</a></td></tr><tr><td><code>valueOf()</code></td><td></td><td><a href="#valueOf">LINK</a></td></tr><tr><td><code>toString()</code></td><td></td><td><a href="#toString">LINK</a></td></tr></tbody></table><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><table><thead><tr><th>函数</th><th>简述</th><th>锚点</th></tr></thead><tbody><tr><td><code>indexOf()</code></td><td></td><td><a href="#indexOf">LINK</a></td></tr><tr><td><code>lastIndexOf()</code></td><td></td><td><a href="#lastIndexOf">LINK</a></td></tr></tbody></table><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><table><thead><tr><th>函数</th><th>简述</th><th>锚点</th></tr></thead><tbody><tr><td><code>forEach()</code></td><td></td><td><a href="#forEach">LINK</a></td></tr><tr><td><code>map()</code></td><td></td><td><a href="#map">LINK</a></td></tr><tr><td><code>filter()</code></td><td></td><td><a href="#filter">LINK</a></td></tr><tr><td><code>every()</code></td><td></td><td><a href="#every">LINK</a></td></tr><tr><td><code>some()</code></td><td></td><td><a href="#some">LINK</a></td></tr><tr><td><code>reduce()</code></td><td></td><td><a href="#reduce">LINK</a></td></tr><tr><td><code>reduceRight()</code></td><td></td><td><a href="#reduceRight">LINK</a></td></tr></tbody></table><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><table><thead><tr><th>函数</th><th>简述</th><th>锚点</th></tr></thead><tbody><tr><td><code>sort()</code></td><td></td><td><a href="#sort">LINK</a></td></tr></tbody></table><ol><li><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a><a id="create">创建数组</a></h3><ol><li><h4 id="var-arr-new-Array"><a href="#var-arr-new-Array" class="headerlink" title="var arr &#x3D; new Array()"></a>var arr &#x3D; new Array()</h4><ol><li>创建一个空数组</li></ol></li><li><h4 id="var-arr-new-Array-10"><a href="#var-arr-new-Array-10" class="headerlink" title="var arr &#x3D; new Array(10)"></a>var arr &#x3D; new Array(10)</h4><ol><li>创建一个包含10项的数组</li></ol></li><li><h4 id="var-arr-Array-7"><a href="#var-arr-Array-7" class="headerlink" title="var arr &#x3D; Array(7)"></a>var arr &#x3D; Array(7)</h4><ol><li>创建一个长度为7的空数组（注意：这是指一个有7个空位(empty)的数组，而不是由7个undefined组成的数组）</li></ol></li><li><h4 id="var-arr-Array-of-7"><a href="#var-arr-Array-of-7" class="headerlink" title="var arr &#x3D; Array.of(7)"></a>var arr &#x3D; Array.of(7)</h4><ol><li>创建一个包含1个字符串7的数组</li></ol></li></ol></li><li><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><ol><li>语法： <code>array.length</code></li><li>作用： 设置或返回数组中元素的数目</li></ol></li><li><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><ol><li><ol><li>向对象添加属性和方法</li></ol></li></ol></li><li><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><ol><li>返回对创建此对象的数组函数的引用</li></ol></li><li><h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h3><ol><li>语法：<code>array.valueOf()</code></li><li>解析：返回 Array 对象的原始值。该原始值由 Array 对象派生的所有对象继承。valueOf() 方法通常由 JavaScript 在后台自动调用，并不显式地出现在代码中。</li><li>是否改变原数组：N</li></ol></li><li><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a><a id="create">concat()</a></h3><ol><li>语法：<code>arrayObject.concat(arrayX,arrayX,......,arrayX)</code></li><li>解析：连接两个或多个数组</li><li>是否改变原数组: N</li></ol></li><li><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><ol><li>语法：<code>arrayObject.join(separator) /*separator-分隔符*/</code></li><li>解析：把数组中的所有元素放入一个字符串</li><li>是否改变原数组: N</li></ol></li><li><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><ol><li>语法：<code>arrayObject.reverse()</code></li><li>解析：颠倒数组中元素的顺序</li><li>是否改变原数组: Y</li></ol></li><li><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><ol><li><p>语法：<code>arrayObject.sort(sortby) sortby 可选。规定排序顺序。必须是函数。</code></p></li><li><p>解析：sort() 方法用于对数组的元素进行排序,并返回数组。默认排序顺序是根据字符串Unicode码点。</p></li><li><p>是否改变原数组: Y</p></li><li><p>不传参数，将不会按照数值大小排序，按照字符编码的顺序进行排序；</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;General&#x27;</span>,<span class="hljs-string">&#x27;Tom&#x27;</span>,<span class="hljs-string">&#x27;Bob&#x27;</span>,<span class="hljs-string">&#x27;John&#x27;</span>,<span class="hljs-string">&#x27;Army&#x27;</span>];<br><span class="hljs-keyword">var</span> resArr = arr.<span class="hljs-title function_">sort</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(resArr);<span class="hljs-comment">//输出   [&quot;Army&quot;, &quot;Bob&quot;, &quot;General&quot;, &quot;John&quot;,&quot;Tom&quot;]</span><br><br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">30</span>,<span class="hljs-number">10</span>,<span class="hljs-number">111</span>,<span class="hljs-number">35</span>,<span class="hljs-number">1899</span>,<span class="hljs-number">50</span>,<span class="hljs-number">45</span>];<br><span class="hljs-keyword">var</span> resArr2 = arr2.<span class="hljs-title function_">sort</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(resArr2);<span class="hljs-comment">//输出   [10, 111, 1899, 30, 35, 45, 50]</span><br></code></pre></td></tr></table></figure></li><li><p>传入参数，实现升序，降序；</p> <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade">  <span class="hljs-keyword">var</span> arr3 = [<span class="hljs-number">30</span>,<span class="hljs-number">10</span>,<span class="hljs-number">111</span>,<span class="hljs-number">35</span>,<span class="hljs-number">1899</span>,<span class="hljs-number">50</span>,<span class="hljs-number">45</span>];<br>arr3.<span class="hljs-built_in">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> a - b;<br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr3);<span class="hljs-comment">//输出  [10, 30, 35, 45, 50, 111, 1899]</span><br><br><span class="hljs-keyword">var</span> arr4 = [<span class="hljs-number">30</span>,<span class="hljs-number">10</span>,<span class="hljs-number">111</span>,<span class="hljs-number">35</span>,<span class="hljs-number">1899</span>,<span class="hljs-number">50</span>,<span class="hljs-number">45</span>];<br>arr4.<span class="hljs-built_in">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> b - a;<br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr4);<span class="hljs-comment">//输出 [1899, 111, 50, 45, 35, 30, 10]</span><br><br></code></pre></td></tr></table></figure></li><li><p>根据数组中的对象的某个属性值排序；</p> <figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs qml">  <span class="hljs-keyword">var</span> arr5 = [&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">10&#125;,&#123;id</span>:<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">6&#125;,&#123;id</span>:<span class="hljs-number">9</span>&#125;,&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">2&#125;,&#123;id</span>:<span class="hljs-number">3</span>&#125;];<br>arr5.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br><span class="hljs-keyword">return</span> a.id - b.id<br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr5);<br><span class="hljs-comment">//输出新的排序</span><br><span class="hljs-comment">//&#123;id: 2&#125;</span><br><span class="hljs-comment">//&#123;id: 3&#125;</span><br><span class="hljs-comment">//&#123;id: 5&#125;</span><br><span class="hljs-comment">//&#123;id: 6&#125;</span><br><span class="hljs-comment">//&#123;id: 9&#125;</span><br><span class="hljs-comment">//&#123;id: 10&#125;</span><br><br></code></pre></td></tr></table></figure></li><li><p>根据数组中的对象的多个属性值排序，多条件排序；</p> <figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs qml">      <span class="hljs-keyword">var</span> arr6 = [&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">10,age</span>:<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">5,age</span>:<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">6,age</span>:<span class="hljs-number">10</span>&#125;,&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">9,age</span>:<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">2,age</span>:<span class="hljs-number">8</span>&#125;,&#123;<span class="hljs-attribute">id:</span><span class="hljs-string">10,age</span>:<span class="hljs-number">9</span>&#125;];<br>arr6.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br><span class="hljs-keyword">if</span>(a.id === b.id)&#123;<span class="hljs-comment">//如果id相同，按照age的降序</span><br><span class="hljs-keyword">return</span> b.age - a.age<br>&#125;<span class="hljs-title">else</span>&#123;<br><span class="hljs-keyword">return</span> a.id - b.id<br>&#125;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr6);<br><span class="hljs-comment">//输出新的排序</span><br><span class="hljs-comment">//&#123;id: 2, age: 8&#125;</span><br><span class="hljs-comment">//&#123;id: 5, age: 4&#125;</span><br><span class="hljs-comment">//&#123;id: 6, age: 10&#125;</span><br><span class="hljs-comment">//&#123;id: 9, age: 6&#125;</span><br><span class="hljs-comment">//&#123;id: 10, age: 9&#125;</span><br><span class="hljs-comment">//&#123;id: 10, age: 2&#125;</span><br><br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><ol><li>语法：<code>arrayObject.pop()</code></li><li>解析：删除并返回数组的最后一个元素。删除 arrayObject 的最后一个元素，把数组长度减 1，并且返回它删除的元素的值。如果数组已经为空，则 pop() 不改变数组，并返回 undefined 值</li><li>是否改变原数组: Y</li></ol></li><li><h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><ol><li>语法：<code>arrayObject.shift()</code></li><li>解析：把数组的第一个元素从其中删除，并返回第一个元素的值。如果数组是空的，那么 shift() 方法将不进行任何操作，返回 undefined 值。请注意，该方法不创建新数组，而是直接修改原有的 arrayObject。</li><li>是否改变原数组: Y</li></ol></li><li><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><ol><li>语法：<code>arrayObject.unshift(newelement1,newelement2,....,newelementX)</code></li><li>解析：向数组的开头添加一个或更多元素，并返回新的长度</li><li>返回值：arrayObject 的新长度。</li><li>是否改变原数组:</li></ol></li><li><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><ol><li>语法：<code>arrayObject.push(newelement1,newelement2,....,newelementX)</code></li><li>解析：向数组的末尾添加一个或多个元素，并返回新的长度。</li><li>是否改变原数组: Y</li></ol></li><li><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><ol><li>语法：<code>arrayObject.slice(start,end)   /*-1 指最后一个元素*/</code></li><li>解析：从已有的数组中返回选定的元素。返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素</li><li>是否改变原数组:</li></ol></li><li><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><ol><li>语法：<code>arrayObject.splice(index,howmany,item1,.....,itemX)/* ary.splice(下标，删除数量，可选参数用于添加新项目)</code></li><li>解析：向&#x2F;从数组中添加&#x2F;删除项目，然后返回被删除的项目。</li><li>是否改变原数组: Y</li></ol></li><li><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h3><ol><li>语法：<code>array.indexOf(item,start)/* indexOf(查找的元素，可选参数规定开始检索得位置取值范围 [0-stringObject.length -1 ] )</code></li><li>解析：返回数组中某个指定的元素位置 从头到尾地检索数组</li><li>返回值：元素在数组中的位置，如果没有搜索到则返回-1</li><li>是否改变原数组: N</li></ol></li><li><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h3><ol><li>语法：<code>stringObject.lastIndexOf(searchvalue,fromindex)</code></li><li>解析：返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索</li><li>返回值：如果要检索的字符串值没有出现，则该方法返回 -1</li><li>是否改变原数组: N</li></ol></li><li><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><ol><li>语法：<code>array.toString()</code></li><li>解析：直接转为字符串，并返回</li><li>是否改变原数组:</li></ol></li><li><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><ol><li>语法：<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">array</span>.<span class="hljs-keyword">forEach</span>(<span class="hljs-keyword">function</span>(currentValue, <span class="hljs-keyword">index</span>, arr), thisValue)<br>currentValue 当前元素<br><span class="hljs-keyword">index</span> 当前元素的索引值<br>arr 当前元素所属的数组对象<br>thisValue 可选。传递给函数的值一般用 &quot;this&quot; 值。<br>如果这个参数为空， &quot;undefined&quot; 会传递给 &quot;this&quot; 值<br></code></pre></td></tr></table></figure></li><li>解析：调用数组的每个元素，并将元素传递给回调函数。对于空数组是不会执行回调函数的。</li><li>是否改变原数组: N</li></ol></li><li><h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><ol><li>语法：<code>array.map(function(currentValue,index,arr), thisValue)同上</code></li><li>解析：返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。按照原始数组元素顺序依次处理元素。不会对空数组进行检测。</li><li>是否改变原数组: N</li></ol></li><li><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><ol><li>语法：<code>array.filter(function(currentValue,index,arr), thisValue)</code></li><li>解析：创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。不会对空数组进行检测</li><li>返回值：没有符合条件的元素则返回空数组</li><li>是否改变原数组: N</li></ol></li><li><h3 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h3><ol><li>语法：<code>array.every(function(currentValue,index,arr), thisValue)</code></li><li>解析：用于检测数组所有元素是否都符合指定条件。如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。如果所有元素都满足条件，则返回 true。不会对空数组进行检测</li><li>是否改变原数组: N</li></ol></li><li><h3 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h3><ol><li>语法：<code>array.some(function(currentValue,index,arr),thisValue)</code></li><li>解析：用于检测数组中的元素是否满足指定条件；会依次执行数组的每个元素；如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测；如果没有满足条件的元素，则返回false；不会对空数组进行检测</li><li>是否改变原数组: N</li></ol></li><li><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h3><ol><li>语法：<code>array.reduce(function(total, currentValue, currentIndex, arr), initialValue) /initialValue 可选，传递给函数的初始值</code></li><li>解析：接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。可以作为一个高阶函数，用于函数的 compose。对于空数组是不会执行回调函数。</li><li>是否改变原数组:</li></ol></li><li><h3 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight()"></a>reduceRight()</h3><ol><li>语法：<code>array.reduceRight(function(total, currentValue, currentIndex, arr), initialValue)</code></li><li>解析：功能和 reduce() 功能是一样的，不同的是 reduceRight() 从数组的末尾向前将数组中的数组项做累加</li><li>是否改变原数组:</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用CSS</title>
    <link href="/2023/11/20/CSSofCommonlyUsed/"/>
    <url>/2023/11/20/CSSofCommonlyUsed/</url>
    
    <content type="html"><![CDATA[<h3 id="文字超出隐藏并显示省略号"><a href="#文字超出隐藏并显示省略号" class="headerlink" title="文字超出隐藏并显示省略号"></a>文字超出隐藏并显示省略号</h3><ol><li>单行实现文本溢出显示省略号：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">span</span>&#123;<br><span class="hljs-attribute">white-space</span>: nowrap;      <span class="hljs-comment">/*超出的空白区域不换行*/</span><br><span class="hljs-attribute">overflow</span>: hidden;         <span class="hljs-comment">/*超出隐藏*/</span><br><span class="hljs-attribute">text-overflow</span>: ellipsis;  <span class="hljs-comment">/*文本超出显示省略号*/</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>两行实现文本溢出显示省略号：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">display</span>: -webkit-box;             <span class="hljs-comment">/*将对象转为弹性盒模型展示*/</span><br>    -webkit-box-orient: vertical;     <span class="hljs-comment">/*设置弹性盒模型子元素的排列方式*/</span><br>    -webkit-line-clamp: <span class="hljs-number">2</span>;            <span class="hljs-comment">/*限制文本行数*/</span><br>    <span class="hljs-attribute">overflow</span>: hidden;                 <span class="hljs-comment">/*超出隐藏*/</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>多行实现文本溢出显示省略号：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.4em</span>;        <span class="hljs-comment">/*行高和height成倍数，这里以三行文本超出隐藏举例*/</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">4.2em</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">::after</span>&#123;         <span class="hljs-comment">/*若要兼容IE8需用:after*/</span><br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;...&quot;</span>;          <span class="hljs-comment">/*替换内容比较灵活*/</span><br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">2px</span>;<br>    <span class="hljs-attribute">right</span>:<span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">3px</span>;<br>    <span class="hljs-attribute">background</span>:<span class="hljs-number">#fff</span>;         <span class="hljs-comment">/*颜色和文字背景保持一致*/</span><br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">#fff</span>;  <span class="hljs-comment">/*边缘处理*/</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="滚动条样式设置"><a href="#滚动条样式设置" class="headerlink" title="滚动条样式设置"></a>滚动条样式设置</h3><ol><li>属性<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">::-webkit-scrollbar    //滚动条整体部分<br>::-webkit-scrollbar-button   //滚动条两端的按钮<br>::-webkit-scrollbar-track   // 外层轨道<br>::-webkit-scrollbar-track-piece    //内层轨道，滚动条中间部分（除去）<br>::-webkit-scrollbar-thumb //滚动条里面可以拖动的那个<br>::-webkit-scrollbar-corner   //边角<br>::-webkit-resizer   ///定义右下角拖动块的样式<br></code></pre></td></tr></table></figure></li><li>示例<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">//  定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸<br>&amp;::-webkit-scrollbar &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0.16rem</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0.16rem</span>;<br>    // <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br><br>// 定义滚动条轨道 内阴影+圆角<br>&amp;::-webkit-scrollbar-track &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#011822</span>;<br>&#125;<br><br>// 定义滑块  内阴影+圆角<br>&amp;::-webkit-scrollbar-thumb &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0.16rem</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0.08rem</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#023548</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="文字向两侧对齐"><a href="#文字向两侧对齐" class="headerlink" title="文字向两侧对齐"></a>文字向两侧对齐</h3><p><code>text-align: justify;</code></p><table><thead><tr><th>text-align</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td></td><td>start</td><td>如果内容方向是左至右，则等于 left，反之则为 right。</td></tr><tr><td></td><td>end</td><td>如果内容方向是左至右，则等于 right，反之则为 left。</td></tr><tr><td></td><td>left</td><td>行内内容向左侧边对齐。</td></tr><tr><td></td><td>right</td><td>行内内容向右侧边对齐。</td></tr><tr><td></td><td>center</td><td>行内内容居中。</td></tr><tr><td></td><td>justify</td><td>文字向两侧对齐，对最后一行无效。</td></tr><tr><td></td><td>justify-all</td><td>和 justify 一致，但是强制使最后一行两端对齐。</td></tr><tr><td></td><td>match-parent</td><td>和 inherit 类似，区别在于 start 和 end 的值根据父元素的 direction 确定，并被替换为恰当的 left 或 right 值。</td></tr></tbody></table><!--|   | <string> | 应用在单元格时，指定单元格内容相对于哪个字符对齐。|-->]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css css3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>错题本</title>
    <link href="/2023/11/20/errorRecord/"/>
    <url>/2023/11/20/errorRecord/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>错题本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>错题 日常记录 bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>photoshopStart</title>
    <link href="/2023/11/17/photoshopStart/"/>
    <url>/2023/11/17/photoshopStart/</url>
    
    <content type="html"><![CDATA[<h3 id="认识界面"><a href="#认识界面" class="headerlink" title="认识界面"></a>认识界面</h3><ol><li><h4 id="油漆桶（更改背景色）"><a href="#油漆桶（更改背景色）" class="headerlink" title="油漆桶（更改背景色）"></a>油漆桶（更改背景色）</h4><ol><li><p>上面的代表前景色 下面的是背景色 左上角可重置颜色 右上角可颜色互换</p><ol><li><img src="/img/ps/17002063180368.jpg"></li><li>点击背景色弹出拾色器窗口，可以从中选择</li></ol></li><li><p>选好颜色后shift+左键渲染工作面</p><ol><li><img src="/img/ps/17002045896302.jpg"></li></ol></li><li><p>也可右键点击展开选择预设置颜色</p><ol><li><img src="/img/ps/17002046915979.jpg"></li></ol></li></ol></li><li><h4 id="复位基本功能（一键重置）"><a href="#复位基本功能（一键重置）" class="headerlink" title="复位基本功能（一键重置）"></a>复位基本功能（一键重置）</h4><ol><li>各种操作区域操作乱序 在 <strong>窗口-&gt;工作区-&gt;复位基本功能</strong> 重置</li></ol></li></ol><h3 id="新建文档"><a href="#新建文档" class="headerlink" title="新建文档"></a>新建文档</h3><ol><li>菜单栏-文件-新建 右边修改初始配置参数<ol><li><img src="/img/ps/17002057788246.jpg"></li></ol></li></ol><h3 id="图像大小"><a href="#图像大小" class="headerlink" title="图像大小"></a>图像大小</h3><ol><li>再次修改文档参数 图像-图像大小<ol><li>快捷键：win：<code>ctrl+alt+i</code> mac:<code>cmd+option+i</code></li><li><img src="/img/ps/17002071119831.jpg"></li></ol></li></ol><h3 id="存储文件"><a href="#存储文件" class="headerlink" title="存储文件"></a>存储文件</h3><ol><li>直接保存（改变源文件）</li><li>另存为</li></ol><h3 id="性能配置-开工前的准备工作"><a href="#性能配置-开工前的准备工作" class="headerlink" title="性能配置-开工前的准备工作"></a>性能配置-开工前的准备工作</h3><ol><li>首选项 <ol><li>快捷键win<code>ctrl+k</code> mac<code>cmd+k</code></li><li>暂存盘<ol><li><img src="/img/ps/17002077698935.jpg"></li></ol></li><li>历史记录<ol><li>可回到做错前的次数 菜单窗口-历史记录</li><li><img src="/img/ps/17002116764872.jpg"></li></ol></li><li>自动保存设置<ol><li><img src="/img/ps/17002118672543.jpg"></li></ol></li><li>快捷键设置<ol><li>菜单编辑-键盘快捷键</li></ol></li></ol></li></ol><h3 id="图层知识"><a href="#图层知识" class="headerlink" title="图层知识"></a>图层知识</h3><ol><li>位置<ol><li>菜单图层</li><li>面板栏的图层面板（窗口-图层）</li></ol></li><li>创建普通图层<ol><li>点击添加按钮（新建图层双击标题区域即可修改名称，增删改查也在此窗口操作）<ol><li><img src="/img/ps/17002125816426.jpg"></li></ol></li><li>option+上面按钮即可唤出<ol><li><img src="/img/ps/17002126818904.jpg"></li></ol></li></ol></li></ol><h3 id="视图操作"><a href="#视图操作" class="headerlink" title="视图操作"></a>视图操作</h3><ol><li>查看画面的方式<ol><li>左边抓手工具（按住空格键不松）</li><li>缩放工具（放大镜图标）</li><li>旋转工具（在抓手工具内）</li></ol></li></ol><!--### 移动工具-->]]></content>
    
    
    <categories>
      
      <category>ps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown基础语法</title>
    <link href="/2023/11/16/markdownGrammar/"/>
    <url>/2023/11/16/markdownGrammar/</url>
    
    <content type="html"><![CDATA[<p><a href="https://markdown.com.cn/">Markdown 官方教程</a></p><!--* <a href="#preface">图片语法</a>--><ol><li><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ol><li>要创建标题，请在单词或短语前面添加井号 (<code>#</code>) 。<code>#</code> 的数量代表了标题的级别。例如，添加三个 <code>#</code> 表示创建一个三级标题 (<code>&lt;h3&gt;</code>)<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"># h1<br>######  h6<br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><ol><li><h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><ol><li>段落的换行是使用两个以上空格加上回车。也可以在段落后面使用一个空行来表示重新开始一个段落。</li></ol></li><li><h4 id="加粗倾斜"><a href="#加粗倾斜" class="headerlink" title="加粗倾斜"></a>加粗倾斜</h4></li></ol> <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">*斜体文本*</span><br><span class="hljs-emphasis">_斜体文本_</span><br><span class="hljs-strong">**粗体文本**</span><br><span class="hljs-emphasis">__粗体文本__</span><br><span class="hljs-strong">***粗斜体文本**</span>*<br><span class="hljs-emphasis">___粗斜体文本__</span>_<br></code></pre></td></tr></table></figure><p> <em>斜体文本</em><br> <em>斜体文本</em><br> <strong>粗体文本</strong><br> <strong>粗体文本</strong><br> <em><strong>粗斜体文本</strong></em><br> <em><strong>粗斜体文本</strong></em></p><ol start="3"><li><h4 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h4></li></ol> <figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">***</span><br><span class="hljs-comment">* * *</span><br><span class="hljs-comment">*****</span><br>- - -<br>----------<br></code></pre></td></tr></table></figure><hr><hr><hr><hr><hr><ol start="4"><li><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4></li></ol> <figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haml">~~删除线~~<br></code></pre></td></tr></table></figure><p> <del>删除线</del></p><ol start="5"><li><h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4></li></ol> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>带下划线文本<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <u>带下划线文本</u></p></li></ol><!--    6. #### 脚注    生成一个脚注1[^footnote].            [^footnote]: 这里是 **脚注** 的 *内容*.        生成一个脚注2[^foot].            [^foot]:这里是**脚注2**的*内容*.--><ol><li><h3 id="换行-1"><a href="#换行-1" class="headerlink" title="换行"></a>换行</h3><ol><li>在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行(<code>&lt;br&gt;</code>)</li></ol></li><li><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><ol><li>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号： <figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">区块引用</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">同层引用</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">同层引用</span><br></code></pre></td></tr></table></figure><blockquote><p>区块引用<br>同层引用<br>同层引用</p></blockquote></li><li>区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推： <figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">最外层</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; 第一层嵌套</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; &gt; 第二层嵌套</span><br></code></pre></td></tr></table></figure><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote></li><li>区块中使用列表 <figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">区块中使用列表</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">1.</span> 第一项</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">2.</span> 第二项</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">+ 第一项</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">+ 第二项</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">+ 第三项</span><br></code></pre></td></tr></table></figure><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote></li><li>列表中使用区块 <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><span class="hljs-quote">&gt; 学习</span><br><span class="hljs-quote">&gt; 学而时习之</span><br><span class="hljs-bullet">*</span> 第二项<br></code></pre></td></tr></table></figure></li></ol><ul><li>第一项<blockquote><p>学习<br>学而时习之</p></blockquote></li><li>第二项</li></ul></li><li><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ol><li><p>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br><span class="hljs-bullet">3.</span> 第三项<br></code></pre></td></tr></table></figure><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></li><li><p>要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。</p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><span class="hljs-bullet">*</span> 第二项<br><span class="hljs-bullet">*</span> 第三项<br><br><span class="hljs-bullet">+</span> 第一项<br><span class="hljs-bullet">+</span> 第二项<br><span class="hljs-bullet">+</span> 第三项<br><br><span class="hljs-bullet">-</span> 第一项<br><span class="hljs-bullet">-</span> 第二项<br><span class="hljs-bullet">-</span> 第三项<br></code></pre></td></tr></table></figure><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></li></ol></li><li><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol><li>要将单词或短语表示为代码，请将其包裹在<strong>反引号 (&#96;&#96;)</strong> 中。<ol><li><code>code part</code></li></ol></li><li>转义反引号 <ol><li>如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在 <strong>双反引号(&#96;&#96;)</strong> 中。<ol><li><code>Use `code` in your Markdown file.</code></li></ol></li></ol></li><li>代码块<ol><li><p>要创建代码块，请将代码块的每一行缩进至少四个空格或一个制表符(<strong>Tab键</strong>)。 也可以用 <code>```</code> 包裹一段代码，并指定一种语言（也可以不指定）</p></li><li><p><strong>(<code>```内容```</code>)</strong><br> <img src="/img/js/17004620062132.jpg"></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;RUNOOB&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>在使用该语法时开头之前必须要有一行空行，若要标记语言则在开头语法加一个空格然后声明语言类型(具体如图所示)，既然开头有要求自然结束也有要求的。结束时切忌不要在结束标签后加空格，否则该标签未关闭。<strong>关闭则直接回车换两行即可</strong>。</p></li></ol></li></ol></li><li><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><ol><li>要创建分隔线，请在单独一行上使用三个或多个星号 (<code>***</code>)、破折号 (<code>---</code>) 或下划线 (<code>___</code>) ，并且不能包含其他内容。<ol><li><hr><ol><li><code>***</code></li></ol></li><li><hr><ol><li><code>---</code></li></ol></li><li><hr><ol><li><code>___</code></li></ol></li></ol></li></ol></li><li><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ol><li><strong>链接文本</strong>放在中括号内，链接地址放在后面的括号中，链接title可选。<ol><li><code> [Markdown语法](https://markdown.com.cn)。</code><br> <a href="https://markdown.com.cn/">Markdown语法</a>。</li></ol></li><li>链接title是当<strong>鼠标悬停在链接上时会出现的文字</strong>，这个title是可选的，它放在圆括号中链接地址后面，跟链接地址之间以空格分隔。<br> 1. <code>[Markdown语法](https://markdown.com.cn &quot;最好的markdown教程&quot;)。</code><br> <a href="https://markdown.com.cn/" title="最好的markdown教程">Markdown语法</a>。</li></ol></li><li><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a><a id="preface">图片</a></h3><ol><li>要<strong>添加图像</strong>，请使用感叹号 (<code>!</code>), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">![这是图片](https:<span class="hljs-regexp">//m</span>arkdown.com.cn<span class="hljs-regexp">/assets/img</span>/philly-magic-garden.<span class="hljs-number">9</span>c0b4415.jpg <span class="hljs-string">&quot;Magic Gardens&quot;</span>) <br></code></pre></td></tr></table></figure> <img src="https://markdown.com.cn/assets/img/philly-magic-garden.9c0b4415.jpg" alt="这是图片" title="Magic Gardens"></li><li>给<strong>图片增加链接</strong>，请将图像的Markdown 括在方括号中，然后将链接添加在圆括号中。 <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[![沙漠中的岩石图片]<span class="hljs-params">(https://tse3-mm.cn.bing.net/th/id/OIP-C.ECTYUcRzB9FMRqYOYvZnSQHaEK?<span class="hljs-attr">w</span>=308&amp;<span class="hljs-attr">h</span>=180&amp;<span class="hljs-attr">c</span>=7&amp;<span class="hljs-attr">r</span>=0&amp;<span class="hljs-attr">o</span>=5&amp;<span class="hljs-attr">dpr</span>=2&amp;<span class="hljs-attr">pid</span>=1.7 &quot;Shiprock&quot;)</span>]<span class="hljs-params">(https://markdown.com.cn)</span><br></code></pre></td></tr></table></figure> <a href="https://markdown.com.cn/"><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.ECTYUcRzB9FMRqYOYvZnSQHaEK?w=308&h=180&c=7&r=0&o=5&dpr=2&pid=1.7" alt="沙漠中的岩石图片" title="Shiprock"></a></li></ol></li><li><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3></li></ol><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">  表头   </span>|<span class="hljs-string"> 表头  </span>|<br>|<span class="hljs-string">  ----  </span>|<span class="hljs-string"> ----  </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 左对齐 </span>|<span class="hljs-string"> 右对齐 </span>|<span class="hljs-string"> 居中对齐 </span>|<br>|<span class="hljs-string"> :-----</span>|<span class="hljs-string"> ----: </span>|<span class="hljs-string"> :----: </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐示例</th><th align="right">右对齐示例</th><th align="center">居中对齐示例</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h4 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h4><pre><code class="hljs">用html代码处理    &lt;tr&gt;    &lt;th&gt;属性&lt;/th&gt;    &lt;th&gt;属性值&lt;/th&gt;    &lt;th&gt;描述&lt;/th&gt;  &lt;/tr &gt;&lt;tr &gt;    &lt;td rowspan=&quot;9&quot;&gt;type&lt;/td&gt;    &lt;td&gt;text&lt;/td&gt;    &lt;td&gt;单行文本输入框&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;password&lt;/td&gt;    &lt;td&gt;密码输入框&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;radio&lt;/td&gt;    &lt;td&gt;单选按钮&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;CheckBox&lt;/td&gt;    &lt;td&gt;复选按钮&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;button&lt;/td&gt;    &lt;td&gt;普通按钮&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;submit&lt;/td&gt;    &lt;td&gt;提交按钮&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;reset&lt;/td&gt;    &lt;td&gt;重置按钮&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;image&lt;/td&gt;    &lt;td&gt;图像形式的提交按钮&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td &gt;file&lt;/td&gt;    &lt;td&gt;文件域&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td &gt;name&lt;/td&gt;    &lt;td&gt;用户自定义&lt;/td&gt;    &lt;td&gt;控件名称&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td &gt;value&lt;/td&gt;    &lt;td &gt;用户自定义&lt;/td&gt;    &lt;td &gt;默认文本值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td &gt;size&lt;/td&gt;    &lt;td &gt;正整数&lt;/td&gt;    &lt;td &gt;控件在页面中的显示宽度&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td &gt;checked&lt;/td&gt;    &lt;td &gt;checked&lt;/td&gt;    &lt;td &gt;定义选择控件默认被选中项&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td &gt;maxlength&lt;/td&gt;    &lt;td &gt;正整数&lt;/td&gt;    &lt;td &gt;控件允许输入的最多字符&lt;/td&gt;&lt;/tr&gt;</code></pre></table><table>    <tr>        <th>属性</th>        <th>属性值</th>        <th>描述</th>      </tr >    <tr >        <td rowspan="9">type</td>        <td>text</td>        <td>单行文本输入框</td>    </tr>    <tr>        <td>password</td>        <td>密码输入框</td>    </tr>    <tr>        <td>radio</td>        <td>单选按钮</td>    </tr>    <tr>        <td>CheckBox</td>        <td>复选按钮</td>    </tr>    <tr><td>button</td>        <td>普通按钮</td>    </tr>    <tr>        <td>submit</td>        <td>提交按钮</td>    </tr>    <tr>        <td>reset</td>        <td>重置按钮</td>    </tr>    <tr>        <td>image</td>        <td>图像形式的提交按钮</td>    </tr>    <tr>        <td >file</td>        <td>文件域</td>    </tr>    <tr>        <td >name</td>        <td>用户自定义</td>        <td>控件名称</td>    </tr>    <tr>        <td >value</td>        <td >用户自定义</td>        <td >默认文本值</td>    </tr>    <tr>        <td >size</td>        <td >正整数</td>        <td >控件在页面中的显示宽度</td>    </tr>    <tr>        <td >checked</td>        <td >checked</td>        <td >定义选择控件默认被选中项</td>    </tr>    <tr>        <td >maxlength</td>        <td >正整数</td>        <td >控件允许输入的最多字符</td>    </tr></table>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown md</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo的安装及git部署</title>
    <link href="/2023/11/15/hexoStall/"/>
    <url>/2023/11/15/hexoStall/</url>
    
    <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="前置安装"><a href="#前置安装" class="headerlink" title="前置安装"></a>前置安装</h3><ol><li>node</li><li>git</li></ol><h3 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h3><ol><li>新建一个文件夹用来存放 Hexo 的程序文件</li><li><code>npm install -g hexo-cli</code><ol><li>mac需要管理员权限（sudo）</li></ol></li><li>初始化&amp;本地预览<ol><li><code>hexo init</code> #初始化</li><li><code>npm install</code> #安装组件</li><li><code>hexo g</code> #生成页面</li><li><code>hexo s</code> #启动预览</li></ol></li></ol><h3 id="部署至github"><a href="#部署至github" class="headerlink" title="部署至github"></a>部署至github</h3><ol><li><p>创建github page 仓库</p><ol><li>Repository name 中输入 用户名 <strong>.github.io</strong></li><li>勾选 “Initialize this repository with a README”</li><li>Description 选填</li><li>-创建后默认自动启用 HTTPS，博客地址为：https:&#x2F;&#x2F;用户名.github.io</li></ol></li><li><p>安装hexo-deployer-git</p><ol><li><code>npm install hexo-deployer-git --save</code></li></ol></li><li><p>修改 _config.yml 文件末尾的 Deployment 部分</p> <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:用户名/用户名.github.io.git<br><span class="hljs-symbol">  branch:</span> master <br></code></pre></td></tr></table></figure><ol start="2"><li><p><strong>用户名一致，都为git账户名称</strong></p></li><li><p><strong>branch为上传分支，git新建项目时默认为main需切换分支或改为main</strong></p><ol><li><img src="/img/hexo/17001017178769.jpg"></li></ol></li><li><p><strong>确认git发布分支是否为当前上传分支，不是则切换</strong></p><ol><li><img src="/img/hexo/17001017531171.jpg"></li></ol></li></ol></li><li><p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages,访问 GitHub 域名 https:&#x2F;&#x2F;用户名.github.io</p></li></ol><h3 id="hexo基础"><a href="#hexo基础" class="headerlink" title="hexo基础"></a>hexo基础</h3><ol><li>hexo基础命令<ol><li><code>hexo init [folder]</code> <ol><li>#新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</li></ol></li><li><strong><code>hexo new [layout] &lt;title&gt;</code></strong><ol><li>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</li><li><code>hexo new &quot;post title with &quot;whitespace&quot;</code></li></ol></li><li><code>hexo generate</code><ol><li>生成静态文件。</li><li>简写 <strong><code>hexo g</code></strong></li></ol></li><li><code>hexo publish [layout] &lt;filename&gt;</code> <ol><li>#发表草稿</li></ol></li><li><code>hexo server</code><ol><li>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a></li><li><code>-p, --port</code>重设端口</li><li><code>-s, --static</code>只使用静态文件</li><li><code>-l, --log</code>启动日记记录，使用覆盖记录格式</li><li>简写 <strong><code>hexo s</code></strong></li></ol></li><li><code>hexo deploy</code>  <ol><li>部署网站。简写 <strong><code>hexo d</code></strong></li><li><strong><code>hexo g -d</code></strong> 部署之前预先生成静态文件</li></ol></li><li><strong><code>hexo clean</code></strong> <ol><li>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</li></ol></li><li>hexo 更换网站小图标 <ol><li>配置文件中 <strong><code>favicon: /img/index/bk.png </code></strong></li></ol></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
